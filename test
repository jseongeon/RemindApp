# 가상환경 무시
.venv/

# 파이썬 캐시 무시
__pycache__/
*.pyc

# VS Code 설정 무시 (선택사항)
.vscode/


adb shell "am start -a android.intent.action.SENDTO -d sms:01083001507 --es sms_body '안녕하세요. 테스트 문자입니다.' --ez exit_on_sent true"
adb shell input keyevent 22
adb shell input tap 1017 2221
################################################
# Windows 가상환경 활성화
.\.venv\Scripts\activate
# 활성화된 상태에서 다시 설치
pip install gspread oauth2client
python app/remindApp.py
################################################


    # 문자앱 강제 실행
    subprocess.run('adb shell am start -n com.samsung.android.messaging/.ui.view.main.WithActivity', shell=True)
    time.sleep(2)

    # 새 문자 작성 버튼 클릭 (좌표는 디바이스별로 다름)
    subprocess.run("adb shell input tap 965 2164", shell=True)  # 상단의 '새 메시지' 버튼 위치
    time.sleep(1)

    # 1:1 메시지 선택
    subprocess.run("adb shell input tap 944 1699", shell=True)
    time.sleep(1)

    # 전화번호 입력
    subprocess.run(f'adb shell input text {phone}', shell=True)
    # subprocess.run('adb shell input keyevent 66', shell=True)  # 엔터
    time.sleep(1)

    # 메시지 작성 시작
    subprocess.run("adb shell input tap 564 539", shell=True)
    time.sleep(1)

    # # 메시지 본문 입력
    # subprocess.run(f'adb shell input text "{message}"', shell=True)
    # time.sleep(1)

    # 메시지 내용을 클립보드로 복사
    subprocess.run(f'adb shell am broadcast -a clipper.set -e text "{message}"', shell=True)
    time.sleep(1)

    # 붙여넣기 (키 이벤트 279: PASTE)
    subprocess.run("adb shell input keyevent 279", shell=True)
    time.sleep(1)

    # 키보드 내리기
    subprocess.run("adb shell input keyevent 111", shell=True)
    time.sleep(1)

    # 전송 버튼 클릭 (좌표는 기기에 맞게 확인 필요)
    subprocess.run("adb shell input tap 1010 2214", shell=True)
    print("✅ 전송 완료!\n")